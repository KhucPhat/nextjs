// Next
import { Metadata } from 'next';
import React from 'react';

// font
import { Noto_Sans_JP } from 'next/font/google';

// Toast notify
import 'react-toastify/dist/ReactToastify.css';

// Toastify
import { ToastContainer } from 'react-toastify';

// Global styling
import '@/assets/css/global.css';

// route
import { ROUTES } from '@/router/routes';

import { redirect } from 'next/navigation';
import { headers } from 'next/headers';

// Components
import NextTopLoader from '@/components/common/NextTopLoader';

// Component
import { Toaster } from '@/components/ui/toaster';
import RecoilRoot from '@/components/RecoilRoot';
import SessionProvider from '@/components/SessionProvider';

// Configs
import { auth } from '@/configs/auth';

// Utils
import { API_ENDPOINT } from '@/utils/constants';
import { REFRESH_TOKEN_ERROR } from '@/utils/constants/common';

// Font config
const NotoSansJP = Noto_Sans_JP({
  weight: ['400', '700'], // Adjust weight as needed
  subsets: ['latin'], // Ensure 'japanese' is included for Japanese characters
});

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default async function RootLayout({ children }: { children: React.ReactNode }) {
  const session = await auth();
  const headerList = headers();
  const pathname = headerList.get('x-current-path');

  if (session?.error === REFRESH_TOKEN_ERROR) {
    redirect(API_ENDPOINT.LOGOUT);
  }

  if (session && pathname && pathname !== ROUTES.REGISTER_TERM_SNS && !session?.error) {
    // case authenticated by SNS without an email
    if (!session.access_token) {
      redirect(ROUTES.REGISTER_TERM_SNS);
    }
    // case authenticated and accessing register/login routes
    if (pathname.includes('register') || pathname.includes('login')) {
      redirect(ROUTES.HOME_PAGE);
    }
  }

  return (
    <html lang="en">
      <body suppressHydrationWarning={true} className={`${NotoSansJP.className}`}>
        <Toaster />
        <NextTopLoader />
        <SessionProvider session={session}>
          <RecoilRoot>
            {children}
            <ToastContainer />
          </RecoilRoot>
        </SessionProvider>
      </body>
    </html>
  );
}
